name: Build OpenWrt-based Rootfs with Plugins

on:
  workflow_dispatch:
    inputs:
      source_branch:
        description: "Select the source branch"
        required: true
        default: "immortalwrt-master"
        type: choice
        options:
          - openwrt-main
          - lede-master
          - immortalwrt-master
      openwrt_kernel:
        description: "Select kernel version"
        required: false
        default: "5.15.y"
        type: choice
        options:
          - 5.4.y
          - 5.10.y
          - 5.15.y
          - 6.1.y
          - 6.6.y
          - 6.12.y

env:
  # 配置文件路径
  FEEDS_CONF: config/${{ inputs.source_branch }}/feeds.conf.default
  CONFIG_FILE: config/${{ inputs.source_branch }}/config
  DIY_P1_SH: config/${{ inputs.source_branch }}/diy-part1.sh
  DIY_P2_SH: config/${{ inputs.source_branch }}/diy-part2.sh
  # 要替换的Makefile源路径
  SOURCE_MAKEFILE: config/Makefile
  # 目标Makefile路径（相对源码目录）
  TARGET_MAKEFILE: feeds/NueXini_Packages/rblibtorrent/Makefile
  TZ: America/New_York

jobs:
  build-rootfs:
    runs-on: ubuntu-22.04
    if: ${{ github.event.repository.owner.id }} == ${{ github.event.sender.id }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Initialization environment (full dependencies)
        id: init
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          # 清理冗余文件
          docker rmi $(docker images -q) 2>/dev/null || true
          [[ -n "${AGENT_TOOLSDIRECTORY}" ]] && sudo rm -rf "${AGENT_TOOLSDIRECTORY}"
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android 2>/dev/null || true
          sudo swapoff -a
          sudo rm -f /swapfile /mnt/swapfile

          # 安装完整依赖
          sudo -E apt-get -y update
          sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
          sudo -E apt-get -y install $(curl -fsSL https://tinyurl.com/ubuntu2204-make-openwrt)
          sudo -E apt-get -y install build-essential clang flex bison g++ gawk gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev python3-distutils rsync unzip zlib1g-dev file wget

          sudo -E systemctl daemon-reload
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          sudo timedatectl set-timezone "${TZ}"
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Clone source code
        id: codes
        if: ${{ steps.init.outputs.status }} == 'success' && !cancelled()
        run: |
          # 根据分支选择源码
          case "${{ inputs.source_branch }}" in
            "immortalwrt-master")
              REPO_URL="https://github.com/immortalwrt/immortalwrt"
              REPO_BRANCH="master"
              PREFIX="immortalwrt"
              ;;
            "openwrt-main")
              REPO_URL="https://github.com/openwrt/openwrt"
              REPO_BRANCH="main"
              PREFIX="openwrt"
              ;;
            "lede-master")
              REPO_URL="https://github.com/coolsnowwolf/lede"
              REPO_BRANCH="master"
              PREFIX="lede"
              ;;
            *)
              echo "Unsupported source branch"
              exit 1
              ;;
          esac

          # 克隆源码到openwrt目录（统一目录名，方便后续操作）
          git clone --single-branch --branch=${REPO_BRANCH} ${REPO_URL} openwrt
          
          # 提取版本号
          cd openwrt
          VERSION=$(git describe --abbrev=0 --tags 2>/dev/null || git rev-parse --short HEAD)
          cd ..
          
          # 输出标签信息
          echo "build_tag=${PREFIX}_${VERSION}_${{ inputs.openwrt_kernel }}_$(date +"%Y%m%d")" >> ${GITHUB_OUTPUT}
          echo "prefix=${PREFIX}" >> ${GITHUB_OUTPUT}
          echo "version=${VERSION}" >> ${GITHUB_OUTPUT}
          echo "REPO_URL=${REPO_URL}" >> ${GITHUB_OUTPUT}
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Load custom feeds
        run: |
          [[ -f "${FEEDS_CONF}" ]] && cp -f ${FEEDS_CONF} openwrt/feeds.conf.default
          if [[ -f "${DIY_P1_SH}" ]]; then
            chmod +x ${DIY_P1_SH}
            cd openwrt/
            ${GITHUB_WORKSPACE}/${DIY_P1_SH}
          else
            echo "No diy-part1.sh found, skipping..."
          fi

      - name: Update and install feeds
        run: |
          cd openwrt/
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      # 新增步骤：替换rblibtorrent的Makefile
      - name: Replace rblibtorrent Makefile
        run: |
          # 确认源码目录存在
          if [[ ! -d "openwrt" ]]; then
            echo "错误：源码目录openwrt不存在"
            exit 1
          fi

          # 确认源Makefile存在
          if [[ ! -f "${SOURCE_MAKEFILE}" ]]; then
            echo "错误：源Makefile不存在，路径：${SOURCE_MAKEFILE}"
            # 显示config目录结构帮助排查
            echo "config目录结构："
            tree config/
            exit 1
          fi

          # 构建目标路径（基于源码目录）
          TARGET_PATH="openwrt/${TARGET_MAKEFILE}"

          # 确认目标目录存在，不存在则创建
          TARGET_DIR=$(dirname "${TARGET_PATH}")
          if [[ ! -d "${TARGET_DIR}" ]]; then
            echo "目标目录不存在，创建目录：${TARGET_DIR}"
            mkdir -p "${TARGET_DIR}"
          fi

          # 执行替换
          echo "替换Makefile：${SOURCE_MAKEFILE} -> ${TARGET_PATH}"
          cp -f "${SOURCE_MAKEFILE}" "${TARGET_PATH}"

          # 验证替换结果
          if [[ -f "${TARGET_PATH}" ]]; then
            echo "Makefile替换成功"
          else
            echo "错误：Makefile替换失败"
            exit 1
          fi

      - name: Load custom configuration
        run: |
          [[ -d "files" ]] && mv -f files openwrt/files
          [[ -e "${CONFIG_FILE}" ]] && cp -f ${CONFIG_FILE} openwrt/.config
          if [[ -f "${DIY_P2_SH}" ]]; then
            chmod +x ${DIY_P2_SH}
            cd openwrt/
            ${GITHUB_WORKSPACE}/${DIY_P2_SH}
          else
            echo "No diy-part2.sh found, skipping..."
          fi

      - name: Verify configuration and enable rootfs
        run: |
          # 检查配置文件是否存在
          if [[ ! -f "openwrt/.config" ]]; then
            echo "错误：未找到配置文件，尝试从默认配置复制"
            if [[ -f "${{ env.CONFIG_FILE }}" ]]; then
              cp -f ${{ env.CONFIG_FILE }} openwrt/.config
            else
              echo "错误：配置文件不存在，路径：${{ env.CONFIG_FILE }}"
              tree config/
              exit 1
            fi
          fi

          # 确认rootfs生成选项已启用
          cd openwrt/
          make defconfig
          if ! grep -q "CONFIG_TARGET_ROOTFS_TARGZ=y" .config; then
            echo "启用rootfs.tar.gz生成选项..."
            echo "CONFIG_TARGET_ROOTFS_TARGZ=y" >> .config
            make defconfig
          fi

      - name: Download packages with retry
        run: |
          cd openwrt/
          # 增加重试机制（最多3次）
          for i in {1..3}; do
            make download -j$(nproc) && break
            echo "第 $i 次下载失败，重试..."
            sleep 5
          done
          # 清理无效文件
          find dl -size -1024c -delete

      - name: Compile rootfs
        id: compile
        run: |
          cd openwrt/
          make -j$(nproc) V=s 2>&1 | tee compile.log
          if [[ -d "bin/targets" ]]; then
            echo "status=success" >> ${GITHUB_OUTPUT}
          else
            echo "编译失败，未生成bin目录"
            exit 1
          fi

      - name: Locate rootfs and prepare artifacts
        id: find_rootfs
        if: ${{ steps.compile.outputs.status }} == 'success'
        run: |
          cd openwrt/
          # 查找rootfs文件
          ROOTFS_PATH=$(find bin/targets -name "*rootfs.tar.gz" | head -n 1)
          if [[ -z "${ROOTFS_PATH}" ]]; then
            ROOTFS_PATH=$(find bin/targets -name "*Rootfs.tar.gz" | head -n 1)
          fi

          if [[ -z "${ROOTFS_PATH}" ]]; then
            echo "错误：未找到rootfs文件"
            cat compile.log
            exit 1
          fi

          # 准备输出
          mkdir -p output
          # 按照要求重命名文件
          NEW_NAME="${{ steps.codes.outputs.prefix }}-${{ steps.codes.outputs.version }}-${{ inputs.openwrt_kernel }}-$(date +"%Y%m%d")-rootfs.tar.gz"
          cp ${ROOTFS_PATH} output/${NEW_NAME}
          
          # 复制实际编译使用的配置文件
          if [[ -f ".config" ]]; then
            cp .config output/${{ steps.codes.outputs.prefix }}-used-config-${{ inputs.openwrt_kernel }}.config
          else
            echo "警告：未找到实际编译使用的.config文件"
          fi
          
          cd output
          sha256sum ${NEW_NAME} > ${NEW_NAME}.sha256

          echo "rootfs_path=output/${NEW_NAME}" >> ${GITHUB_OUTPUT}
          echo "rootfs_name=${NEW_NAME}" >> ${GITHUB_OUTPUT}
          echo "used_config_name=${{ steps.codes.outputs.prefix }}-used-config-${{ inputs.openwrt_kernel }}.config" >> ${GITHUB_OUTPUT}
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Upload artifacts
        uses: ncipollo/release-action@main
        if: ${{ steps.find_rootfs.outputs.status }} == 'success'
        with:
          tag: ${{ steps.codes.outputs.build_tag }}
          artifacts: |
            ${{ steps.find_rootfs.outputs.rootfs_path }}
            output/${{ steps.find_rootfs.outputs.rootfs_name }}.sha256
            output/${{ steps.find_rootfs.outputs.used_config_name }}
          token: ${{ secrets.GITHUB_TOKEN }}
          body: |
            ### 根文件系统信息
            - 项目: ${{ steps.codes.outputs.prefix }}
            - 版本: ${{ steps.codes.outputs.version }}
            - 配置文件路径: ${{ env.CONFIG_FILE }}
            - 内核版本: ${{ inputs.openwrt_kernel }}
            - 构建日期: $(date +"%Y%m%d")
            - 包含实际编译使用的配置文件
            - 已替换rblibtorrent的Makefile
