name: Build ImmortalWrt Rootfs with Plugins

on:
  workflow_dispatch:
    inputs:
      source_branch:
        description: "Select the source branch"
        required: true
        default: "immortalwrt-master"
        type: choice
        options:
          - openwrt-main
          - lede-master
          - immortalwrt-master
      openwrt_kernel:
        description: "Select kernel version"
        required: false
        default: "5.15.y"
        type: choice
        options:
          - 5.4.y
          - 5.10.y
          - 5.15.y
          - 6.1.y
          - 6.6.y
          - 6.12.y

env:
  CONFIG_FILE: config/${{ inputs.source_branch }}/config-immortalwrt
  TZ: America/New_York
  # 确认有效的依赖仓库URL
  CSSTIDY_REPO: "https://github.com/openwrt/packages.git"
  UCERT_REPO: "https://github.com/openwrt/ucert.git"
  MUSL_FTS_REPO: "https://github.com/openwrt/musl-fts.git"
  LIBBPF_VERSION: "1.4.5"
  # 统一gettext版本避免冲突
  GETTEXT_VERSION: "0.20.1-6ubuntu1"

jobs:
  build-rootfs:
    runs-on: ubuntu-22.04
    if: ${{ github.event.repository.owner.id }} == ${{ github.event.sender.id }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            openwrt/dl
            openwrt/staging_dir
          key: ${{ inputs.source_branch }}-${{ inputs.openwrt_kernel }}-${{ github.sha }}
          restore-keys: |
            ${{ inputs.source_branch }}-${{ inputs.openwrt_kernel }}-

      - name: Initialization environment (fixed dependencies)
        id: init
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          # 清理冗余文件释放空间
          sudo swapoff -a
          sudo rm -f /swapfile /mnt/swapfile
          [[ -n "${AGENT_TOOLSDIRECTORY}" ]] && sudo rm -rf "${AGENT_TOOLSDIRECTORY}"
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android 2>/dev/null

          # 强制更新软件源
          sudo -E apt-get -y update || true
          sudo -E apt-get -y install software-properties-common || true
          sudo add-apt-repository -y universe

          # 卸载冲突的高版本gettext
          sudo -E apt-get -y purge gettext gettext-base || true

          # 安装指定版本的gettext解决版本冲突
          sudo -E apt-get -y install \
            gettext=${{ env.GETTEXT_VERSION }} \
            gettext-base=${{ env.GETTEXT_VERSION }}

          # 安装基础依赖+缺失的uuid开发库
          sudo -E apt-get -y install \
            build-essential clang flex bison g++ gawk gcc-multilib g++-multilib \
            gettext git libncurses5-dev libncursesw5-dev libssl-dev libelf-dev \
            python3 python3-distutils python3-pip rsync unzip zlib1g-dev file wget \
            libfuse-dev libtool automake autoconf libgmp3-dev libmpc-dev \
            perl-modules libpod-parser-perl \
            libuuid1 libuuid-dev  # 新增：解决uuid.h缺失问题

          # 锁定gettext版本防止自动升级
          sudo apt-mark hold gettext gettext-base

          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          sudo timedatectl set-timezone "${TZ}"
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Clone source code
        id: codes
        if: ${{ steps.init.outputs.status }} == 'success' && !cancelled()
        run: |
          case "${{ inputs.source_branch }}" in
            "immortalwrt-master")
              REPO_URL="https://github.com/immortalwrt/immortalwrt"
              REPO_BRANCH="master"
              TAGS_NAME="immortalwrt"
              ;;
            "openwrt-main")
              REPO_URL="https://github.com/openwrt/openwrt"
              REPO_BRANCH="main"
              TAGS_NAME="openwrt"
              ;;
            "lede-master")
              REPO_URL="https://github.com/coolsnowwolf/lede"
              REPO_BRANCH="master"
              TAGS_NAME="lede"
              ;;
            *)
              echo "Unsupported source branch"
              exit 1
              ;;
          esac

          git clone --depth 1 --single-branch --branch=${REPO_BRANCH} ${REPO_URL} openwrt
          echo "build_tag=${TAGS_NAME}_Rootfs_${{ inputs.openwrt_kernel }}_$(date +"%Y%m%d")" >> ${GITHUB_OUTPUT}
          echo "REPO_URL=${REPO_URL}" >> ${GITHUB_OUTPUT}
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Fix dependency URLs and versions
        if: ${{ steps.codes.outputs.status }} == 'success'
        run: |
          cd openwrt

          # 修复csstidy仓库
          if [[ -f "feeds/packages/utils/csstidy/Makefile" ]]; then
            sed -i "s|https://github.com/jow-/csstidy-cpp.git|${{ env.CSSTIDY_REPO }}|g" feeds/packages/utils/csstidy/Makefile
          fi

          # 修复ucert仓库
          if [[ -f "package/network/utils/ucert/Makefile" ]]; then
            sed -i "s|https://git.openwrt.org/project/ucert.git|${{ env.UCERT_REPO }}|g" package/network/utils/ucert/Makefile
          fi

          # 修复musl-fts仓库
          if [[ -f "package/libs/musl-fts/Makefile" ]]; then
            sed -i "s|https://github.com/pullmoll/musl-fts.git|${{ env.MUSL_FTS_REPO }}|g" package/libs/musl-fts/Makefile
          fi

          # 修复libbpf版本
          if [[ -f "package/libs/libbpf/Makefile" ]]; then
            sed -i "s|PKG_VERSION:=.*|PKG_VERSION:=${{ env.LIBBPF_VERSION }}|g" package/libs/libbpf/Makefile
            sed -i "s|PKG_HASH:=.*|PKG_HASH:=d194f74228d8a4db44631f855d7124a4e279a40a5344d2e9264b064665a41f7|g" package/libs/libbpf/Makefile
          fi

          # 强制使用系统安装的gettext避免版本冲突
          sed -i "s|^PKG_BUILD_DEPENDS.*gettext|# PKG_BUILD_DEPENDS: gettext (commented to use system version)|g" $(find package/ -name "Makefile" | grep -v "feeds")

      - name: 下载第三方插件源码
        run: |
          git clone --depth 1 https://github.com/NueXini/NueXini_Packages.git third_party_plugins
          ls -la third_party_plugins

      - name: 复制自定义插件
        run: |
          mkdir -p openwrt/package/custom-plugins
          
          for plugin in luci-app-adguardhome luci-app-oaf adguardhome; do
            if [ -d "third_party_plugins/$plugin" ]; then
              cp -rf third_party_plugins/$plugin openwrt/package/custom-plugins/
              echo "已复制$plugin"
            else
              echo "警告：未找到$plugin目录"
            fi
          done
          ls -la openwrt/package/custom-plugins

      - name: Update and install feeds
        run: |
          cd openwrt/
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Load configuration and sync kernel
        run: |
          if [[ ! -f "${{ env.CONFIG_FILE }}" ]]; then
            echo "错误：未找到配置文件 ${{ env.CONFIG_FILE }}"
            tree config/
            exit 1
          fi
          cp -f ${{ env.CONFIG_FILE }} openwrt/.config

          cd openwrt
          if [[ "${{ inputs.source_branch }}" == "lede-master" ]]; then
            sed -i "s/^CONFIG_KERNEL_PATCHVER=.*/CONFIG_KERNEL_PATCHVER=${{ inputs.openwrt_kernel }}/" .config
          else
            sed -i "s/^CONFIG_TARGET_KERNEL_PATCHVER=.*/CONFIG_TARGET_KERNEL_PATCHVER=${{ inputs.openwrt_kernel }}/" .config
          fi

          make defconfig
          if ! grep -q "CONFIG_TARGET_ROOTFS_TARGZ=y" .config; then
            echo "错误：未启用rootfs.tar.gz生成"
            exit 1
          fi

      - name: Download packages with enhanced retry
        run: |
          cd openwrt/
          # 增加重试次数和间隔，解决404下载错误
          for i in {1..8}; do
            make download -j$(nproc) && break
            echo "第 $i 次下载失败，重试..."
            # 指数退避策略：每次重试间隔增加5秒
            sleep $((5 * i))
            # 清理无效的下载文件
            find dl -size -1024c -delete
          done
          # 检查是否所有依赖都下载成功
          if [[ $(find dl -size -1024c | wc -l) -gt 0 ]]; then
            echo "错误：部分依赖下载失败"
            find dl -size -1024c
            exit 1
          fi

      - name: Compile rootfs
        id: compile
        run: |
          cd openwrt/
          make -j2 V=s 2>&1 | tee compile.log
          if [[ -d "bin/targets" ]]; then
            echo "status=success" >> ${GITHUB_OUTPUT}
          else
            echo "编译失败，未生成bin目录"
            exit 1
          fi

      - name: Upload compile log on failure
        if: failure() && steps.compile.outputs.status != 'success'
        uses: actions/upload-artifact@v4
        with:
          name: compile-log
          path: openwrt/compile.log

      - name: Locate rootfs and prepare artifacts
        id: find_rootfs
        if: ${{ steps.compile.outputs.status }} == 'success'
        run: |
          cd openwrt/
          ROOTFS_PATH=$(find bin/targets -name "*rootfs.tar.gz" | head -n 1)
          if [[ -z "${ROOTFS_PATH}" ]]; then
            ROOTFS_PATH=$(find bin/targets -name "*Rootfs.tar.gz" | head -n 1)
          fi

          if [[ -z "${ROOTFS_PATH}" ]]; then
            echo "错误：未找到rootfs文件"
            cat compile.log
            exit 1
          fi

          mkdir -p output
          cp ${ROOTFS_PATH} output/
          cp ${{ env.CONFIG_FILE }} output/config-immortalwrt-used
          cd output
          ROOTFS_FILE=$(basename ${ROOTFS_PATH})
          sha256sum ${ROOTFS_FILE} > ${ROOTFS_FILE}.sha256

          echo "rootfs_path=output/${ROOTFS_FILE}" >> ${GITHUB_OUTPUT}
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Upload artifacts
        uses: ncipollo/release-action@main
        if: ${{ steps.find_rootfs.outputs.status }} == 'success'
        with:
          tag: ${{ steps.codes.outputs.build_tag }}
          artifacts: |
            ${{ steps.find_rootfs.outputs.rootfs_path }}
            ${{ steps.find_rootfs.outputs.rootfs_path }}.sha256
            output/config-immortalwrt-used
          token: ${{ secrets.GITHUB_TOKEN }}
          body: |
            ### 根文件系统信息
            - 源码分支: ${{ inputs.source_branch }}
            - 内核版本: ${{ inputs.openwrt_kernel }}
            - 包含插件: 官方插件 + 自定义插件(luci-app-adguardhome, luci-app-oaf, adguardhome)
